// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserAnswerQuestion represents a row from 'app_mvp_dating.user_answer_question'.
type UserAnswerQuestion struct {
	UserID       uint           `json:"user_id"`       // user_id
	QuestionID   uint           `json:"question_id"`   // question_id
	SelfAnswer   sql.NullString `json:"self_answer"`   // self_answer
	ExpectAnswer sql.NullString `json:"expect_answer"` // expect_answer
	HateAnswer   sql.NullString `json:"hate_answer"`   // hate_answer
	AlsoAsk      sql.NullBool   `json:"also_ask"`      // also_ask
	Deleted      sql.NullBool   `json:"deleted"`       // deleted

	// xo fields
	_exists bool
}

// Exists determines if the UserAnswerQuestion exists in the database.
func (uaq *UserAnswerQuestion) Exists() bool {
	return uaq._exists
}

// Deleted provides information if the UserAnswerQuestion has been deleted from the database.
func (uaq *UserAnswerQuestion) IsDeleted() bool {
	return uaq.Deleted.Valid && uaq.Deleted.Bool == true
}

// Insert inserts the UserAnswerQuestion to the database.
func (uaq *UserAnswerQuestion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uaq._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO app_mvp_dating.user_answer_question (` +
		`user_id, question_id, self_answer, expect_answer, hate_answer, also_ask, deleted` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uaq.UserID, uaq.QuestionID, uaq.SelfAnswer, uaq.ExpectAnswer, uaq.HateAnswer, uaq.AlsoAsk, uaq.Deleted)
	_, err = db.Exec(sqlstr, uaq.UserID, uaq.QuestionID, uaq.SelfAnswer, uaq.ExpectAnswer, uaq.HateAnswer, uaq.AlsoAsk, uaq.Deleted)
	if err != nil {
		return err
	}

	// set existence
	uaq._exists = true

	return nil
}

// Update updates the UserAnswerQuestion in the database.
func (uaq *UserAnswerQuestion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uaq._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uaq.Deleted.Valid && uaq.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_answer_question SET ` +
		`self_answer = ?, expect_answer = ?, hate_answer = ?, also_ask = ?, deleted = ?` +
		` WHERE user_id = ? AND question_id = ?`

	// run query
	XOLog(sqlstr, uaq.SelfAnswer, uaq.ExpectAnswer, uaq.HateAnswer, uaq.AlsoAsk, uaq.Deleted, uaq.UserID, uaq.QuestionID)
	_, err = db.Exec(sqlstr, uaq.SelfAnswer, uaq.ExpectAnswer, uaq.HateAnswer, uaq.AlsoAsk, uaq.Deleted, uaq.UserID, uaq.QuestionID)
	return err
}

// Save saves the UserAnswerQuestion to the database.
func (uaq *UserAnswerQuestion) Save(db XODB) error {
	if uaq.Exists() {
		return uaq.Update(db)
	}

	return uaq.Insert(db)
}

// Delete deletes the UserAnswerQuestion from the database.
func (uaq *UserAnswerQuestion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uaq._exists {
		return nil
	}

	// if deleted, bail
	if uaq.Deleted.Valid && uaq.Deleted.Bool == true {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_answer_question SET deleted = ? WHERE user_id = ? AND question_id = ?`

	// run query
	XOLog(sqlstr, true, uaq.UserID, uaq.QuestionID)
	_, err = db.Exec(sqlstr, true, uaq.UserID, uaq.QuestionID)
	if err != nil {
		return err
	}

	// set deleted
	uaq.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// User returns the User associated with the UserAnswerQuestion's UserID (user_id).
//
// Generated from foreign key 'fk_user_answer_question_1'.
func (uaq *UserAnswerQuestion) User(db XODB) (*User, error) {
	return UserByUserID(db, uaq.UserID)
}

// Question returns the Question associated with the UserAnswerQuestion's QuestionID (question_id).
//
// Generated from foreign key 'fk_user_answer_question_2'.
func (uaq *UserAnswerQuestion) Question(db XODB) (*Question, error) {
	return QuestionByQuestionID(db, uaq.QuestionID)
}

// UserAnswerQuestionsByUserID retrieves a row from 'app_mvp_dating.user_answer_question' as a UserAnswerQuestion.
//
// Generated from index 'fk_user_answer_question_1_idx'.
func UserAnswerQuestionsByUserID(db XODB, userID uint) ([]*UserAnswerQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, question_id, self_answer, expect_answer, hate_answer, also_ask, deleted ` +
		`FROM app_mvp_dating.user_answer_question ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserAnswerQuestion{}
	for q.Next() {
		uaq := UserAnswerQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&uaq.UserID, &uaq.QuestionID, &uaq.SelfAnswer, &uaq.ExpectAnswer, &uaq.HateAnswer, &uaq.AlsoAsk, &uaq.Deleted)
		if err != nil {
			return nil, err
		}

		res = append(res, &uaq)
	}

	return res, nil
}

// UserAnswerQuestionsByQuestionID retrieves a row from 'app_mvp_dating.user_answer_question' as a UserAnswerQuestion.
//
// Generated from index 'fk_user_answer_question_2_idx'.
func UserAnswerQuestionsByQuestionID(db XODB, questionID uint) ([]*UserAnswerQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, question_id, self_answer, expect_answer, hate_answer, also_ask, deleted ` +
		`FROM app_mvp_dating.user_answer_question ` +
		`WHERE question_id = ?`

	// run query
	XOLog(sqlstr, questionID)
	q, err := db.Query(sqlstr, questionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserAnswerQuestion{}
	for q.Next() {
		uaq := UserAnswerQuestion{
			_exists: true,
		}

		// scan
		err = q.Scan(&uaq.UserID, &uaq.QuestionID, &uaq.SelfAnswer, &uaq.ExpectAnswer, &uaq.HateAnswer, &uaq.AlsoAsk, &uaq.Deleted)
		if err != nil {
			return nil, err
		}

		res = append(res, &uaq)
	}

	return res, nil
}

// UserAnswerQuestionByQuestionID retrieves a row from 'app_mvp_dating.user_answer_question' as a UserAnswerQuestion.
//
// Generated from index 'user_answer_question_question_id_pkey'.
func UserAnswerQuestionByQuestionID(db XODB, questionID uint) (*UserAnswerQuestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, question_id, self_answer, expect_answer, hate_answer, also_ask, deleted ` +
		`FROM app_mvp_dating.user_answer_question ` +
		`WHERE question_id = ?`

	// run query
	XOLog(sqlstr, questionID)
	uaq := UserAnswerQuestion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, questionID).Scan(&uaq.UserID, &uaq.QuestionID, &uaq.SelfAnswer, &uaq.ExpectAnswer, &uaq.HateAnswer, &uaq.AlsoAsk, &uaq.Deleted)
	if err != nil {
		return nil, err
	}

	return &uaq, nil
}
