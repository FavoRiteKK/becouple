//+build USE_DB_AUTH_STORER

// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Conversation represents a row from 'app_mvp_dating.conversation'.
type Conversation struct {
	ConversationID uint           `json:"conversation_id"` // conversation_id
	UserIDOne      sql.NullInt64  `json:"user_id_one"`     // user_id_one
	UserIDTwo      sql.NullInt64  `json:"user_id_two"`     // user_id_two
	IP             sql.NullString `json:"ip"`              // ip
	Deleted        sql.NullBool   `json:"deleted"`         // deleted

	// xo fields
	_exists bool
}

// Exists determines if the Conversation exists in the database.
func (c *Conversation) Exists() bool {
	return c._exists
}

// Deleted provides information if the Conversation has been deleted from the database.
func (c *Conversation) IsDeleted() bool {
	return c.Deleted.Valid && c.Deleted.Bool == true
}

// Insert inserts the Conversation to the database.
func (c *Conversation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO app_mvp_dating.conversation (` +
		`user_id_one, user_id_two, ip, deleted` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.UserIDOne, c.UserIDTwo, c.IP, c.Deleted)
	res, err := db.Exec(sqlstr, c.UserIDOne, c.UserIDTwo, c.IP, c.Deleted)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ConversationID = uint(id)
	c._exists = true

	return nil
}

// Update updates the Conversation in the database.
func (c *Conversation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c.Deleted.Valid && c.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.conversation SET ` +
		`user_id_one = ?, user_id_two = ?, ip = ?, deleted = ?` +
		` WHERE conversation_id = ?`

	// run query
	XOLog(sqlstr, c.UserIDOne, c.UserIDTwo, c.IP, c.Deleted, c.ConversationID)
	_, err = db.Exec(sqlstr, c.UserIDOne, c.UserIDTwo, c.IP, c.Deleted, c.ConversationID)
	return err
}

// Save saves the Conversation to the database.
func (c *Conversation) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Conversation from the database.
func (c *Conversation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c.Deleted.Valid && c.Deleted.Bool == true {
		return nil
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.conversation SET deleted = ? WHERE conversation_id = ?`

	// run query
	XOLog(sqlstr, true, c.ConversationID)
	_, err = db.Exec(sqlstr, true, c.ConversationID)
	if err != nil {
		return err
	}

	// set deleted
	c.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// ConversationByConversationID retrieves a row from 'app_mvp_dating.conversation' as a Conversation.
//
// Generated from index 'conversation_conversation_id_pkey'.
func ConversationByConversationID(db XODB, conversationID uint) (*Conversation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`conversation_id, user_id_one, user_id_two, ip, deleted ` +
		`FROM app_mvp_dating.conversation ` +
		`WHERE conversation_id = ?`

	// run query
	XOLog(sqlstr, conversationID)
	c := Conversation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, conversationID).Scan(&c.ConversationID, &c.UserIDOne, &c.UserIDTwo, &c.IP, &c.Deleted)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
