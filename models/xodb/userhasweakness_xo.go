// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserHasWeakness represents a row from 'app_mvp_dating.user_has_weakness'.
type UserHasWeakness struct {
	UserID    uint         `json:"user_id"`    // user_id
	SubjectID uint         `json:"subject_id"` // subject_id
	Deleted   sql.NullBool `json:"deleted"`    // deleted

	// xo fields
	_exists bool
}

// Exists determines if the UserHasWeakness exists in the database.
func (uhw *UserHasWeakness) Exists() bool {
	return uhw._exists
}

// Deleted provides information if the UserHasWeakness has been deleted from the database.
func (uhw *UserHasWeakness) IsDeleted() bool {
	return uhw.Deleted.Valid && uhw.Deleted.Bool == true
}

// Insert inserts the UserHasWeakness to the database.
func (uhw *UserHasWeakness) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uhw._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO app_mvp_dating.user_has_weakness (` +
		`user_id, subject_id, deleted` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uhw.UserID, uhw.SubjectID, uhw.Deleted)
	_, err = db.Exec(sqlstr, uhw.UserID, uhw.SubjectID, uhw.Deleted)
	if err != nil {
		return err
	}

	// set existence
	uhw._exists = true

	return nil
}

// Update updates the UserHasWeakness in the database.
func (uhw *UserHasWeakness) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhw._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uhw.Deleted.Valid && uhw.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_weakness SET ` +
		`deleted = ?` +
		` WHERE user_id = ? AND subject_id = ?`

	// run query
	XOLog(sqlstr, uhw.Deleted, uhw.UserID, uhw.SubjectID)
	_, err = db.Exec(sqlstr, uhw.Deleted, uhw.UserID, uhw.SubjectID)
	return err
}

// Save saves the UserHasWeakness to the database.
func (uhw *UserHasWeakness) Save(db XODB) error {
	if uhw.Exists() {
		return uhw.Update(db)
	}

	return uhw.Insert(db)
}

// Delete deletes the UserHasWeakness from the database.
func (uhw *UserHasWeakness) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhw._exists {
		return nil
	}

	// if deleted, bail
	if uhw.Deleted.Valid && uhw.Deleted.Bool == true {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_weakness SET deleted = ? WHERE user_id = ? AND subject_id = ?`

	// run query
	XOLog(sqlstr, true, uhw.UserID, uhw.SubjectID)
	_, err = db.Exec(sqlstr, true, uhw.UserID, uhw.SubjectID)
	if err != nil {
		return err
	}

	// set deleted
	uhw.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// User returns the User associated with the UserHasWeakness's UserID (user_id).
//
// Generated from foreign key 'fk_user_has_weakness_1'.
func (uhw *UserHasWeakness) User(db XODB) (*User, error) {
	return UserByUserID(db, uhw.UserID)
}

// Subject returns the Subject associated with the UserHasWeakness's SubjectID (subject_id).
//
// Generated from foreign key 'fk_user_has_weakness_2'.
func (uhw *UserHasWeakness) Subject(db XODB) (*Subject, error) {
	return SubjectBySubjectID(db, uhw.SubjectID)
}

// UserHasWeaknessesBySubjectID retrieves a row from 'app_mvp_dating.user_has_weakness' as a UserHasWeakness.
//
// Generated from index 'fk_user_has_weakness_2_idx'.
func UserHasWeaknessesBySubjectID(db XODB, subjectID uint) ([]*UserHasWeakness, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, subject_id, deleted ` +
		`FROM app_mvp_dating.user_has_weakness ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	q, err := db.Query(sqlstr, subjectID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserHasWeakness{}
	for q.Next() {
		uhw := UserHasWeakness{
			_exists: true,
		}

		// scan
		err = q.Scan(&uhw.UserID, &uhw.SubjectID, &uhw.Deleted)
		if err != nil {
			return nil, err
		}

		res = append(res, &uhw)
	}

	return res, nil
}

// UserHasWeaknessBySubjectID retrieves a row from 'app_mvp_dating.user_has_weakness' as a UserHasWeakness.
//
// Generated from index 'user_has_weakness_subject_id_pkey'.
func UserHasWeaknessBySubjectID(db XODB, subjectID uint) (*UserHasWeakness, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, subject_id, deleted ` +
		`FROM app_mvp_dating.user_has_weakness ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	uhw := UserHasWeakness{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subjectID).Scan(&uhw.UserID, &uhw.SubjectID, &uhw.Deleted)
	if err != nil {
		return nil, err
	}

	return &uhw, nil
}
