// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Subject represents a row from 'app_mvp_dating.subject'.
type Subject struct {
	SubjectID    uint         `json:"subject_id"`    // subject_id
	SubjectAlias string       `json:"subject_alias"` // subject_alias
	Deleted      sql.NullBool `json:"deleted"`       // deleted

	// xo fields
	_exists bool
}

// Exists determines if the Subject exists in the database.
func (s *Subject) Exists() bool {
	return s._exists
}

// Deleted provides information if the Subject has been deleted from the database.
func (s *Subject) IsDeleted() bool {
	return s.Deleted.Valid && s.Deleted.Bool == true
}

// Insert inserts the Subject to the database.
func (s *Subject) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO app_mvp_dating.subject (` +
		`subject_alias, deleted` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.SubjectAlias, s.Deleted)
	res, err := db.Exec(sqlstr, s.SubjectAlias, s.Deleted)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.SubjectID = uint(id)
	s._exists = true

	return nil
}

// Update updates the Subject in the database.
func (s *Subject) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s.Deleted.Valid && s.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.subject SET ` +
		`subject_alias = ?, deleted = ?` +
		` WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, s.SubjectAlias, s.Deleted, s.SubjectID)
	_, err = db.Exec(sqlstr, s.SubjectAlias, s.Deleted, s.SubjectID)
	return err
}

// Save saves the Subject to the database.
func (s *Subject) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Subject from the database.
func (s *Subject) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s.Deleted.Valid && s.Deleted.Bool == true {
		return nil
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.subject SET deleted = ? WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, true, s.SubjectID)
	_, err = db.Exec(sqlstr, true, s.SubjectID)
	if err != nil {
		return err
	}

	// set deleted
	s.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// SubjectBySubjectAlias retrieves a row from 'app_mvp_dating.subject' as a Subject.
//
// Generated from index 'subject_alias_UNIQUE'.
func SubjectBySubjectAlias(db XODB, subjectAlias string) (*Subject, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`subject_id, subject_alias, deleted ` +
		`FROM app_mvp_dating.subject ` +
		`WHERE subject_alias = ?`

	// run query
	XOLog(sqlstr, subjectAlias)
	s := Subject{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subjectAlias).Scan(&s.SubjectID, &s.SubjectAlias, &s.Deleted)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SubjectBySubjectID retrieves a row from 'app_mvp_dating.subject' as a Subject.
//
// Generated from index 'subject_subject_id_pkey'.
func SubjectBySubjectID(db XODB, subjectID uint) (*Subject, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`subject_id, subject_alias, deleted ` +
		`FROM app_mvp_dating.subject ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	s := Subject{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subjectID).Scan(&s.SubjectID, &s.SubjectAlias, &s.Deleted)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
