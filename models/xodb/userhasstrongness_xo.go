// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserHasStrongness represents a row from 'app_mvp_dating.user_has_strongness'.
type UserHasStrongness struct {
	UserID    uint         `json:"user_id"`    // user_id
	SubjectID uint         `json:"subject_id"` // subject_id
	Deleted   sql.NullBool `json:"deleted"`    // deleted

	// xo fields
	_exists bool
}

// Exists determines if the UserHasStrongness exists in the database.
func (uhs *UserHasStrongness) Exists() bool {
	return uhs._exists
}

// Deleted provides information if the UserHasStrongness has been deleted from the database.
func (uhs *UserHasStrongness) IsDeleted() bool {
	return uhs.Deleted.Valid && uhs.Deleted.Bool == true
}

// Insert inserts the UserHasStrongness to the database.
func (uhs *UserHasStrongness) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uhs._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO app_mvp_dating.user_has_strongness (` +
		`user_id, subject_id, deleted` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uhs.UserID, uhs.SubjectID, uhs.Deleted)
	_, err = db.Exec(sqlstr, uhs.UserID, uhs.SubjectID, uhs.Deleted)
	if err != nil {
		return err
	}

	// set existence
	uhs._exists = true

	return nil
}

// Update updates the UserHasStrongness in the database.
func (uhs *UserHasStrongness) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhs._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uhs.Deleted.Valid && uhs.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_strongness SET ` +
		`deleted = ?` +
		` WHERE user_id = ? AND subject_id = ?`

	// run query
	XOLog(sqlstr, uhs.Deleted, uhs.UserID, uhs.SubjectID)
	_, err = db.Exec(sqlstr, uhs.Deleted, uhs.UserID, uhs.SubjectID)
	return err
}

// Save saves the UserHasStrongness to the database.
func (uhs *UserHasStrongness) Save(db XODB) error {
	if uhs.Exists() {
		return uhs.Update(db)
	}

	return uhs.Insert(db)
}

// Delete deletes the UserHasStrongness from the database.
func (uhs *UserHasStrongness) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhs._exists {
		return nil
	}

	// if deleted, bail
	if uhs.Deleted.Valid && uhs.Deleted.Bool == true {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_strongness SET deleted = ? WHERE user_id = ? AND subject_id = ?`

	// run query
	XOLog(sqlstr, true, uhs.UserID, uhs.SubjectID)
	_, err = db.Exec(sqlstr, true, uhs.UserID, uhs.SubjectID)
	if err != nil {
		return err
	}

	// set deleted
	uhs.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// User returns the User associated with the UserHasStrongness's UserID (user_id).
//
// Generated from foreign key 'fk_user_has_strongness_1'.
func (uhs *UserHasStrongness) User(db XODB) (*User, error) {
	return UserByUserID(db, uhs.UserID)
}

// Subject returns the Subject associated with the UserHasStrongness's SubjectID (subject_id).
//
// Generated from foreign key 'fk_user_has_strongness_2'.
func (uhs *UserHasStrongness) Subject(db XODB) (*Subject, error) {
	return SubjectBySubjectID(db, uhs.SubjectID)
}

// UserHasStrongnessesBySubjectID retrieves a row from 'app_mvp_dating.user_has_strongness' as a UserHasStrongness.
//
// Generated from index 'fk_user_has_strongness_2_idx'.
func UserHasStrongnessesBySubjectID(db XODB, subjectID uint) ([]*UserHasStrongness, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, subject_id, deleted ` +
		`FROM app_mvp_dating.user_has_strongness ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	q, err := db.Query(sqlstr, subjectID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserHasStrongness{}
	for q.Next() {
		uhs := UserHasStrongness{
			_exists: true,
		}

		// scan
		err = q.Scan(&uhs.UserID, &uhs.SubjectID, &uhs.Deleted)
		if err != nil {
			return nil, err
		}

		res = append(res, &uhs)
	}

	return res, nil
}

// UserHasStrongnessBySubjectID retrieves a row from 'app_mvp_dating.user_has_strongness' as a UserHasStrongness.
//
// Generated from index 'user_has_strongness_subject_id_pkey'.
func UserHasStrongnessBySubjectID(db XODB, subjectID uint) (*UserHasStrongness, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, subject_id, deleted ` +
		`FROM app_mvp_dating.user_has_strongness ` +
		`WHERE subject_id = ?`

	// run query
	XOLog(sqlstr, subjectID)
	uhs := UserHasStrongness{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, subjectID).Scan(&uhs.UserID, &uhs.SubjectID, &uhs.Deleted)
	if err != nil {
		return nil, err
	}

	return &uhs, nil
}
