// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserHasInterest represents a row from 'app_mvp_dating.user_has_interests'.
type UserHasInterest struct {
	Deleted    sql.NullBool `json:"deleted"`     // deleted
	UserID     uint         `json:"user_id"`     // user_id
	InterestID uint         `json:"interest_id"` // interest_id

	// xo fields
	_exists bool
}

// Exists determines if the UserHasInterest exists in the database.
func (uhi *UserHasInterest) Exists() bool {
	return uhi._exists
}

// Deleted provides information if the UserHasInterest has been deleted from the database.
func (uhi *UserHasInterest) IsDeleted() bool {
	return uhi.Deleted.Valid && uhi.Deleted.Bool == true
}

// Insert inserts the UserHasInterest to the database.
func (uhi *UserHasInterest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if uhi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO app_mvp_dating.user_has_interests (` +
		`deleted, user_id, interest_id` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, uhi.Deleted, uhi.UserID, uhi.InterestID)
	_, err = db.Exec(sqlstr, uhi.Deleted, uhi.UserID, uhi.InterestID)
	if err != nil {
		return err
	}

	// set existence
	uhi._exists = true

	return nil
}

// Update updates the UserHasInterest in the database.
func (uhi *UserHasInterest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if uhi.Deleted.Valid && uhi.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_interests SET ` +
		`deleted = ?` +
		` WHERE user_id = ? AND interest_id = ?`

	// run query
	XOLog(sqlstr, uhi.Deleted, uhi.UserID, uhi.InterestID)
	_, err = db.Exec(sqlstr, uhi.Deleted, uhi.UserID, uhi.InterestID)
	return err
}

// Save saves the UserHasInterest to the database.
func (uhi *UserHasInterest) Save(db XODB) error {
	if uhi.Exists() {
		return uhi.Update(db)
	}

	return uhi.Insert(db)
}

// Delete deletes the UserHasInterest from the database.
func (uhi *UserHasInterest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !uhi._exists {
		return nil
	}

	// if deleted, bail
	if uhi.Deleted.Valid && uhi.Deleted.Bool == true {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE app_mvp_dating.user_has_interests SET deleted = ? WHERE user_id = ? AND interest_id = ?`

	// run query
	XOLog(sqlstr, true, uhi.UserID, uhi.InterestID)
	_, err = db.Exec(sqlstr, true, uhi.UserID, uhi.InterestID)
	if err != nil {
		return err
	}

	// set deleted
	uhi.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// User returns the User associated with the UserHasInterest's UserID (user_id).
//
// Generated from foreign key 'fk_user_has_interests_1'.
func (uhi *UserHasInterest) User(db XODB) (*User, error) {
	return UserByUserID(db, uhi.UserID)
}

// Subject returns the Subject associated with the UserHasInterest's InterestID (interest_id).
//
// Generated from foreign key 'fk_user_has_interests_2'.
func (uhi *UserHasInterest) Subject(db XODB) (*Subject, error) {
	return SubjectBySubjectID(db, uhi.InterestID)
}

// UserHasInterestsByUserID retrieves a row from 'app_mvp_dating.user_has_interests' as a UserHasInterest.
//
// Generated from index 'fk_user_has_interests_1_idx'.
func UserHasInterestsByUserID(db XODB, userID uint) ([]*UserHasInterest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`deleted, user_id, interest_id ` +
		`FROM app_mvp_dating.user_has_interests ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserHasInterest{}
	for q.Next() {
		uhi := UserHasInterest{
			_exists: true,
		}

		// scan
		err = q.Scan(&uhi.Deleted, &uhi.UserID, &uhi.InterestID)
		if err != nil {
			return nil, err
		}

		res = append(res, &uhi)
	}

	return res, nil
}

// UserHasInterestsByInterestID retrieves a row from 'app_mvp_dating.user_has_interests' as a UserHasInterest.
//
// Generated from index 'fk_user_has_interests_2_idx'.
func UserHasInterestsByInterestID(db XODB, interestID uint) ([]*UserHasInterest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`deleted, user_id, interest_id ` +
		`FROM app_mvp_dating.user_has_interests ` +
		`WHERE interest_id = ?`

	// run query
	XOLog(sqlstr, interestID)
	q, err := db.Query(sqlstr, interestID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserHasInterest{}
	for q.Next() {
		uhi := UserHasInterest{
			_exists: true,
		}

		// scan
		err = q.Scan(&uhi.Deleted, &uhi.UserID, &uhi.InterestID)
		if err != nil {
			return nil, err
		}

		res = append(res, &uhi)
	}

	return res, nil
}

// UserHasInterestByInterestID retrieves a row from 'app_mvp_dating.user_has_interests' as a UserHasInterest.
//
// Generated from index 'user_has_interests_interest_id_pkey'.
func UserHasInterestByInterestID(db XODB, interestID uint) (*UserHasInterest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`deleted, user_id, interest_id ` +
		`FROM app_mvp_dating.user_has_interests ` +
		`WHERE interest_id = ?`

	// run query
	XOLog(sqlstr, interestID)
	uhi := UserHasInterest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, interestID).Scan(&uhi.Deleted, &uhi.UserID, &uhi.InterestID)
	if err != nil {
		return nil, err
	}

	return &uhi, nil
}
