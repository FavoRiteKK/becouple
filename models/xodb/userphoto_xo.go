//+build USE_DB_AUTH_STORER

// Package xodb contains the types for schema 'app_mvp_dating'.
package xodb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// UserPhoto represents a row from 'app_mvp_dating.user_photo'.
type UserPhoto struct {
	PhotoID  uint         `json:"photo_id"`  // photo_id
	PhotoURI string       `json:"photo_uri"` // photo_uri
	UserID   uint         `json:"user_id"`   // user_id
	Deleted  sql.NullBool `json:"deleted"`   // deleted

	// xo fields
	_exists bool
}

// Exists determines if the UserPhoto exists in the database.
func (up *UserPhoto) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserPhoto has been deleted from the database.
func (up *UserPhoto) IsDeleted() bool {
	return up.Deleted.Valid && up.Deleted.Bool == true
}

// Insert inserts the UserPhoto to the database.
func (up *UserPhoto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO app_mvp_dating.user_photo (` +
		`photo_uri, user_id, deleted` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, up.PhotoURI, up.UserID, up.Deleted)
	res, err := db.Exec(sqlstr, up.PhotoURI, up.UserID, up.Deleted)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	up.PhotoID = uint(id)
	up._exists = true

	return nil
}

// Update updates the UserPhoto in the database.
func (up *UserPhoto) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up.Deleted.Valid && up.Deleted.Bool == true {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.user_photo SET ` +
		`photo_uri = ?, user_id = ?, deleted = ?` +
		` WHERE photo_id = ?`

	// run query
	XOLog(sqlstr, up.PhotoURI, up.UserID, up.Deleted, up.PhotoID)
	_, err = db.Exec(sqlstr, up.PhotoURI, up.UserID, up.Deleted, up.PhotoID)
	return err
}

// Save saves the UserPhoto to the database.
func (up *UserPhoto) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Insert(db)
}

// Delete deletes the UserPhoto from the database.
func (up *UserPhoto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up.Deleted.Valid && up.Deleted.Bool == true {
		return nil
	}

	// sql query
	const sqlstr = `UPDATE app_mvp_dating.user_photo SET deleted = ? WHERE photo_id = ?`

	// run query
	XOLog(sqlstr, true, up.PhotoID)
	_, err = db.Exec(sqlstr, true, up.PhotoID)
	if err != nil {
		return err
	}

	// set deleted
	up.Deleted = sql.NullBool{Bool: true, Valid: true}

	return nil
}

// User returns the User associated with the UserPhoto's UserID (user_id).
//
// Generated from foreign key 'fk_user_photo'.
func (up *UserPhoto) User(db XODB) (*User, error) {
	return UserByUserID(db, up.UserID)
}

// UserPhotosByUserID retrieves a row from 'app_mvp_dating.user_photo' as a UserPhoto.
//
// Generated from index 'fk_user_photo'.
func UserPhotosByUserID(db XODB, userID uint) ([]*UserPhoto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`photo_id, photo_uri, user_id, deleted ` +
		`FROM app_mvp_dating.user_photo ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	q, err := db.Query(sqlstr, userID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*UserPhoto{}
	for q.Next() {
		up := UserPhoto{
			_exists: true,
		}

		// scan
		err = q.Scan(&up.PhotoID, &up.PhotoURI, &up.UserID, &up.Deleted)
		if err != nil {
			return nil, err
		}

		res = append(res, &up)
	}

	return res, nil
}

// UserPhotoByPhotoID retrieves a row from 'app_mvp_dating.user_photo' as a UserPhoto.
//
// Generated from index 'user_photo_photo_id_pkey'.
func UserPhotoByPhotoID(db XODB, photoID uint) (*UserPhoto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`photo_id, photo_uri, user_id, deleted ` +
		`FROM app_mvp_dating.user_photo ` +
		`WHERE photo_id = ?`

	// run query
	XOLog(sqlstr, photoID)
	up := UserPhoto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, photoID).Scan(&up.PhotoID, &up.PhotoURI, &up.UserID, &up.Deleted)
	if err != nil {
		return nil, err
	}

	return &up, nil
}
